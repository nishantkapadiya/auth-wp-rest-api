import Head from 'next/head';
import { Inter } from 'next/font/google';
import styles from '@/styles/Home.module.css';
const inter = Inter({ subsets: ['latin'] });
import { useState, useEffect } from 'react';
import axios from 'axios';
import Cookies from 'js-cookie';
import clientConfig from './client-config';
import Link from 'next/link';

const Blog = () => {
	const [posts, setPosts] = useState([]);
	const token = Cookies.get('jwt_token');
	const wordPressSiteURL = clientConfig.siteUrl;
	useEffect(() => {
		const fetchData = async () => {
			try {
				if (token) {
					const response = await axios.get(`${wordPressSiteURL}/wp-json/wp/v2/posts`, {
						headers: {
							Authorization:
								`Bearer ${token}`,
						},
					});
					const fetchedPosts = response.data;
					if (fetchedPosts) {
						setPosts(fetchedPosts);
					}
				}
			} catch (error) {
				console.error(error);
			}
		};

		fetchData();
	}, []);
	if (posts.length === 0) {
		// No posts, render a message or component indicating no posts
		return (
			<>
				<Head>
					<title>Blogs</title>
					<meta name="description" content="Generated by create next app" />
					<meta name="viewport" content="width=device-width, initial-scale=1" />
					<link rel="icon" href="/favicon.ico" />

				</Head>
				<main className={`${styles.main} ${inter.className}`}>
					<h1>Token not found in cookie.</h1>
				</main>

			</>

		);
	} else {
		// Posts are available, render the list of posts
		return (
			<>
				<Head>
					<title>Blogs</title>
					<meta name="description" content="Generated by create next app" />
					<meta name="viewport" content="width=device-width, initial-scale=1" />
					<link rel="icon" href="/favicon.ico" />
				</Head>
				<main className={`${styles.main} ${inter.className}`}>
					<h1>Blog</h1>
					<ul>
						{posts.map((post) => (
							<li key={post.id} className='p-5 border mb-5'>
								<Link href={`/blog/${post.slug}`}>
									<h2 className='text-4xl text-orange-300 mb-4'>{post.title.rendered}</h2>
								</Link>
								<div dangerouslySetInnerHTML={{ __html: post.excerpt.rendered }} />
							</li>
						))}
					</ul>
				</main>
			</>
		);
	}
};

export default Blog;